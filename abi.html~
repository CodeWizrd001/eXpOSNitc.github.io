<!DOCTYPE html>
<html lang="en">
  <head>

    <!-- Basic Page Needs
    ================================================== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <title>ABI</title>

    <!-- Mobile Specific Metas
    ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Favicon -->
    <link rel="shortcut icon" type="image/png" href="img/favicon.jpg"/>

    <!-- CSS
    ================================================== -->       
    <!-- Bootstrap css file-->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <!-- Font awesome css file-->
    <link href="css/font-awesome.min.css" rel="stylesheet">
    <!-- Superslide css file-->
    <link rel="stylesheet" href="css/superslides.css">
    <!-- Slick slider css file -->
    <link href="css/slick.css" rel="stylesheet"> 
    <!-- smooth animate css file -->
    <link rel="stylesheet" href="css/animate.css">  
    <!-- Elastic grid css file -->
    <link rel="stylesheet" href="css/elastic_grid.css"> 
    <!-- Circle counter cdn css file -->
    <link rel='stylesheet prefetch' href='https://cdn.rawgit.com/pguso/jquery-plugin-circliful/master/css/jquery.circliful.css'>    
    <!-- Default Theme css file -->
    <link id="orginal" href="css/themes/eucalyptus-theme.css" rel="stylesheet">
    <!-- Main structure css file -->
    <link href="style.css" rel="stylesheet">
   
    <!-- Google fonts -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Varela' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet' type='text/css'>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>
  <body> 
     <!-- BEGAIN PRELOADER -->
    <div id="preloader">
      <div id="status">&nbsp;</div>
    </div>
    <!-- END PRELOADER -->

  
    <!--=========== BEGIN HEADER SECTION ================-->
    <header id="header">
      <!-- BEGIN MENU -->
      <div class="menu_area">
        <nav class="navbar navbar-default navbar-fixed-top past-main" role="navigation"> 
          <div class="container">
          <div class="navbar-header">
            <!-- FOR MOBILE VIEW COLLAPSED BUTTON -->
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>

            <!-- LOGO -->

            <!-- TEXT BASED LOGO -->
            <a class="navbar-brand" href="index.html">eXpOS<span>NITC</span></a>
            
                              
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul id="top-menu" class="nav navbar-nav navbar-right main_nav">
              <li><a href="index.html">Home</a></li>
              <li><a href="Roadmap.html">Roadmap</a></li>
              <li><a href="Documentation.html">Documentation</a></li> 
               <li><a href="#pricing">Downloads</a></li> <!--Change here--> 
              <li><a href="#team">About Us</a></li>                                     
            </ul>           
          </div>
          </div>     
        </nav>  
      </div>
      <!-- END MENU -->

      
    </header>
		
    <!--=========== End HEADER SECTION ================--> 
    
    <!--begin section-->
    <section id="abi">
		<br>
		<br>
		<br>
      <div class="container">
        <div class="row">
          <div class="col-lg-12 col-md-12">
            <div class="about_area">
             
                <!-- START ABOUT HEADING -->
              <div class="heading">
                <h2 class="wow fadeInLeftBig">Application Binary Interface (ABI)</h2>
                <br/>
                <br/>
                <p> Introduction to abi</p>
              </div>

              <!-- START ABOUT CONTENT -->
              <div class="about_content">
                <div class="row">
                   <div class="about_featured">
                      <div class="panel-group" id="accordion">
                        <!-- START SINGLE FEATURED ITEM #1-->
                        <div class="panel panel-default wow fadeInLeft">
                          <div class="panel-heading">
                            <h4 class="panel-title">
                              <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">
                                 <span class="fa fa-check-square-o"></span>XSM Instruction Set
                              </a>
                            </h4>
                          </div>
                          <div id="collapse1" class="panel-collapse collapse">
                            <div class="panel-body">
                             <p>
XSM Instruction set describes the target language in which a compiler must generate an executable file. Instructions are classified into privileged and unprivileged instructions. Programs run in user mode can make use of only unprivileged instructions while programs run in kernel mode makes use of both privileged and unprivileged instructions.

The unprivileged instructions are
  
</p>

                            </div>
                          </div>
                        </div>
                        <!-- START SINGLE FEATURED ITEM #2 -->
                        <div class="panel panel-default wow fadeInLeft">
                          <div class="panel-heading">
                            <h4 class="panel-title">
                              <a data-toggle="collapse" data-parent="#accordion" href="#collapse2">
                                 <span class="fa fa-check-square-o"></span>Virtual Memory Process Model 
                              </a>
                            </h4>
                          </div>
                          <div id="collapse2" class="panel-collapse collapse">
                            <div class="panel-body">
                           <p>
                               The (virtual) address space of any eXpOS process is logically divided into four parts namely <i>Shared Library, Heap, Code and Stack</i>.
</p>
<img src="img/process_model.png">
<p><b>Shared library</b> can be shared by more than one executable files.The maximum size of this memory region is X_LSIZE.</p>
<p>
NOTE : The present version of eXpOS assumes that routines for dynamic memory allocation are loaded into the shared library region. The present eXpOS implementation of XSM architecture sets X_LSIZE to 1024 words.</p>
<p><b>Heap</b> is the portion of the address space of a process reserved as the memory pool from which dynamic memory allocation
is done by the allocator routines in the shared library (for example, memory allocated via malloc in C). Library functions access this portion of memory for dynamic memory allocation and deallocation.   The eXpOS execution semantics specify that When a process 
executes the fork() system call, this region will be shared between the parent process and the child process.</p>
<p><b>Code</b> contains the header and part of the XEXE executable file, which is loaded by the eXpOS loader from the file system when the exec() system is executed.  The first eight words of the executable contains the header.  The reset of the code region contains the
XSM instructions. The total size of code section cannot exceed X_CSIZE.  The present version of eXpOS sets X_CSIZE to 1024 words.</p>
<p><b>Stack</b> is the space reseved for the run time stack of the process.  Parameters and local variables associated with functions in a program are allocated in the stack.   In the XSM architecture, the stack grows upwards and maximum size of the stack is X_SSIZE. Global variables must be allocated in the stack as the E\executable format does not support a seperate Data region (see Wiki Link). The 
present version of eXpOS sets X_SIZE to 1024 words</p>
                            </div>
                          </div>
                        </div>
                        <!-- START SINGLE FEATURED ITEM #3 -->
                        <div class="panel panel-default wow fadeInLeft">
                          <div class="panel-heading">
                            <h4 class="panel-title">
                              <a data-toggle="collapse" data-parent="#accordion" href="#collapse3">
                                <span class="fa fa-check-square-o"></span>XEXE Executable File Format
                              </a>
                            </h4>
                          </div>
                          <div id="collapse3" class="panel-collapse collapse">
                            <div class="panel-body">
                                <br>
                                <br>
                                <p>Any executable file in eXpOS must be in XEXE format as eXpOS executes only those files of such format.  
 
The name of any executable file must end with .xsm.  Example: program.xsm
   </p>    
   <p>The typical executable file in eXpOS consist of  2 parts:</p>
   <ul style="text-indent: 5em;">
       <li>1. Header</li>
       <li>2. Code</li>
   </ul>
   <img src="img/exe_file.jpeg">
   <p>The total size of the file is defined by the constant XFS_EXESIZE.</p>
   <p>The first eight words of the executable file are reserved for the header which describes the features of file. Structure of the header is :</p>
   <img src="img/header.png">
   <p><b>XMAGIC</b> is a number indicating the type of executable file. All XEXE files will have magic number.</p>
 
   <p><b>Entry point</b> contains the virtual address in memory of the first instruction to be executed (entry point) of the program after the kernel has loaded it.  During loading, the program counter must be initialized to this address. </p>
 
   <p><b>Text Size, Data Size, Heap Size</b> and <b>Stack size</b> stores the size of Text, Data, Heap and Stack segments respectively, in words.</p>

   <p>Note that Data and stack has to be in the same area and must be managed by the compiler / application program.</p>
   <p>If the <b>Heap Library</b> must included when the file is loaded, the Library Flag is set to 1. Generally, memory is not allocated for the heap if this flag is not set.</p>

 
                               </div>
                          </div>
                        </div>
                        
                     <!-- START SINGLE FEATURED ITEM #4 -->
                        <div class="panel panel-default wow fadeInLeft">
                          <div class="panel-heading">
                            <h4 class="panel-title">
                              <a data-toggle="collapse" data-parent="#accordion" href="#collapse4">
                                <span class="fa fa-check-square-o"></span>Low Level System Call Interface
                              </a>
                            </h4>
                          </div>
                          <div id="collapse4" class="panel-collapse collapse">
                            <div class="panel-body">
                            
                                <p><b>Low level system call interface</b> describes the conventions to be followed by application programs that invoke eXpOS system calls on the XSM architecture.  The interface describes the software interrupt instruction (trap) corresponding to each system call  and the  calling conventions for passing arguments and extracting return values of the system call through the application program's stack.  This part is architecture dependent.  </p>
                                <h3>System Calls</h3>
                                <p>System calls are like built in functions in eXpL. When eXpL translates a system call, it generates an INT instruction, which transfers control to an interrupt service routine that contains the system call implementation. The interrupt routine runs in kernel mode. Read about various interrupts [@@##@LINK] available in eXPL.</p>
                                <p><i>Note</i> : The eXPL compiler follows the programming system call invocation convention specified here.</p> 
                                <p>For an application program, there are two stages in executing a system call:</p>
                                <ul style="text-indent: 5em;">
                                    <li>1. Before the system call:   The calling application must set up the arguments in the (user) stack before executing the trap instruction.  </li>
                                    <li>2. After the system call:   The return values of the system call must be extracted from the stack.  </li>
                                    
                                </ul>
                                <h3>Invoking a system call</h3>
                                <p>An user process invokes a system call by first pushing the arguments and system call number into the stack and then invoking the <b>INT</b> machine instruction corresponding to the system call. </p>
                                <p> A system call in eXPL compiles to a set of machine instructions. They are the stack operations that must be performed by the user program before INT instruction (See machine instructions above). The arguments are pushed to stack in an order such that last argument comes on top. A push instruction 'PUSH R0' is done to put an empty space in the stack for the return value. The system call implementation must ensure that the return value is stored in this space. The system call number is pushed to the stack. The interrupt routine needs this value to identify the system call. <p>

                                <p style="text-indent: 5em;">PUSH Argument_1&nbsp;&nbsp;&nbsp;&nbsp;     	// Push arguments to the stack</p>
                                <p style="text-indent: 5em;">.</p>
                                <p style="text-indent: 5em;">.</p>
                                <p style="text-indent: 5em;">PUSH Argument_n</p>
                                <p style="text-indent: 5em;">PUSH R0          &nbsp;&nbsp;&nbsp;&nbsp;// Push an empty space for RETURN VALUE</p>
                                <p style="text-indent: 5em;">PUSH System_Call_No     	&nbsp;&nbsp;&nbsp;&nbsp;// Push system call number </p>  
                                <p style="text-indent: 5em;">INT number    	&nbsp;&nbsp;&nbsp;&nbsp;// Invoke the corresponding INT instruction. The number can be any number between 0 and 18</p> 
                                
                                <p>The following figure shows the data stored in process stack before an INT instruction. </p>
                                <img src="img/system_call_stack1.png" style="margin-left: 200px;">
                                
                                <p>The INT instruction will push the value of IP + 2 on to the stack. This value is the address of the instruction after the INT instruction in the user program. Each instruction is 2 words, hence IP is incremented by 2. This IP value will be used by interrupt routine to return back from the system call to the next instruction in the calling program. The INT instruction changes mode from <b>User</b> mode to <b>kernel</b> mode and passes control to the Interrupt Routine corresponding to the system call. </p>
                                <p>The following figure shows the data stored in process stack after an INT instruction. </p>
                                <img src="img/system_call_stack2.png" style="margin-left: 200px;">
                                <h3>After return from the system call</h3>
                                <p>The IRET instruction transfers control back to the user program to the instruction immediately following the INT instruction. The following machine instructions are present after the INT instruction in the eXpL compiled machine code given in the previous step. </p>
                                <p>POP System Call Number&nbsp;&nbsp;&nbsp;&nbsp;  	// Pop and discard the system call number</p>
                                <p>POP Ri  &nbsp;&nbsp;&nbsp;&nbsp;    // Pop and save the return value into some register Ri</p>
                                <p>POP Argument_n          &nbsp;&nbsp;&nbsp;&nbsp;// Pop and discard arguments</p>
                                <p>.</p>
                                <p>.</p>
                                <p>POP Argument_1  &nbsp;&nbsp;&nbsp;&nbsp; // Now the stack is popped back to the state before call </p>
                                <p>The machine code above pops the values from the stack. The system call number and arguments were inputs to the system call and hence they may be discarded now. The return value which is stored in the stack by the system call is fetched and used by the user program by popping out to some register.   </p>
                                <h3>System calls and their translation</h3>
                                <table class="table table-bordered" style="text-align: center;">
                                    <tr>
                                        <th style="text-align: center;">System Call</th>
                                        <th style="text-align: center;">System Call Number</th>
                                        <th style="text-align: center;">Interrupt Routine Number</th>
                                    </tr>
  <tr>
    <td>Create</td>
    <td>1</td>	
    <td>1</td>
  <tr>
    <td>Delete</td>
    <td>4</td>	
    <td>1</td>	    
  </tr>
  <tr>
    <td>Open</td>
    <td>2</td>		
    <td>2</td>	
  </tr>
  <tr>
	  <td>Close</td>
	  <td>3</td>
          <td>2</td>	
  </tr>
  <tr>
	  <td>Read</td>
	  <td>7</td>
          <td>3</td>	
  </tr>
  <tr>
	  <td>Write</td>
	  <td>5</td>
          <td>4</td>	
  </tr>
  <tr>
	  <td>Seek</td>
	  <td>6</td>
          <td>3</td>	
  </tr>

  <tr>
    <td>Fork</td>
    <td>8</td>
    <td>5</td>	
  </tr>		
  <tr>
    <td>Exec</td>
    <td>9</td>
    <td>6</td>	
    
  </tr>
  <tr>
    <td>Exit</td>
    <td>10</td>		
    <td>7</td>	
  </tr>
  <tr>
	  <td>Getpid</td>
	  <td>11</td>
          <td>6</td>	
  </tr>
  <tr>
	  <td>Getppid</td>
	  <td>12</td>
          <td>6</td>	
  </tr>
  <tr>
    <td>Shutdown</td>
    <td>21</td>		
    <td>#$%^</td>	
  </tr>

  <tr>
    <td>Signal</td>
    <td>14</td>	
    <td>7</td>	
  <tr>
    <td>Wait</td>
    <td>13</td>	
    <td>7</td>	    
  </tr>
  <tr>
    <td>FLock</td>
    <td>15</td>		
    <td> %^&&</td>	
  </tr>
  <tr>
	  <td>FUnLock</td>
	  <td>16</td>
          <td>&**^%</td>	
  </tr>
  <tr>
	  <td>Semget</td>
	  <td>17</td>
          <td>#$^</td>	
  </tr>
  <tr>
	  <td>Semrelease</td>
	  <td>18</td>
          <td>%^^$#</td>	
  </tr>
  <tr>
	  <td>SemLock</td>
	  <td>19 </td>
          <td>^$#@</td>	
  </tr>
  <tr>
	  <td>SemUnLock</td>
	  <td>20</td>
          <td>#%^&</td>	
  </tr>
  
</table>
            <p>For details on the specification of the system calls, click <a href="os_spec-files/systemcallinterface.html">here</a></p>

                               </div>
                          </div>
                        </div>
                           
                        
                      </div>
                    </div>
               
                  
                </div>
              </div>
            </div>
          </div>
        </div>       
      </div>
       	
		 
    </section>
    
    <!--end section-->
                
 <!--=========== BEGIN FOOTER ================-->
     <footer id="footer">
       <div class="container">
         <div class="row">
           <div class="col-lg-6 col-md-6 col-sm-6">
             <div class="footer_left">
               <p><a href="http://www.nitc.ac.in/">National Institute of Technology, Calicut</a></p>
             </div>
           </div>
         </div>
       </div>
      </footer>
      <!--=========== END FOOTER ================-->

     <!-- Javascript Files
     ================================================== -->
  
     <!-- initialize jQuery Library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <!-- Google map -->
    <script src="https://maps.googleapis.com/maps/api/js"></script>
    <script src="js/jquery.ui.map.js"></script>
     <!-- For smooth animatin  -->
    <script src="js/wow.min.js"></script> 
    <!-- Bootstrap js -->
    <script src="js/bootstrap.min.js"></script>
    <!-- superslides slider -->
    <script src="js/jquery.superslides.min.js" type="text/javascript"></script>
    <!-- slick slider -->
    <script src="js/slick.min.js"></script>    
    <!-- for circle counter -->
    <script src='https://cdn.rawgit.com/pguso/jquery-plugin-circliful/master/js/jquery.circliful.min.js'></script>
    <!-- for portfolio filter gallery -->
    <script src="js/modernizr.custom.js"></script>
    <script src="js/classie.js"></script>
    <script src="js/elastic_grid.min.js"></script>
    <script src="js/portfolio_slider.js"></script>

    <!-- Custom js-->
    <script src="js/custom.js"></script>
  </body>
</html>
